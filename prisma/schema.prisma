generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id        String   @id
  street    String
  city      String
  state     String
  country   String
  zip       String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Cart {
  id        String    @id
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime
  users     User      @relation(fields: [userId], references: [id])
  products  Product[] @relation("CartToProduct")

  @@map("carts")
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  slug          String     @unique
  description   String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  parentId      String?
  subCategories Category[] @relation("SubCategories")

  @@map("categories")
}

model Order {
  id        String    @id
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime
  users     User      @relation(fields: [userId], references: [id])
  products  Product[] @relation("OrderToProduct")

  @@map("orders")
}

model Product {
  id             String   @id
  slug           String   @unique
  name           String
  sku            String   @unique
  price          Float
  categoryId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  code           String?
  content        String?
  images         String[]
  mrp            Float
  newLabel       String?
  quantity       Int
  saleLabel      String?
  subDescription String?
  categories     Category @relation(fields: [categoryId], references: [id])
  cart           Cart[]   @relation("CartToProduct")
  orders         Order[]  @relation("OrderToProduct")
  reviews        Review[]

  @@map("products")
}

model User {
  id             String    @id
  email          String    @unique
  name           String
  phone          String?
  password       String?
  image          String?
  role           Role?     @default(user)
  created_at     DateTime  @default(now())
  email_verified String?
  updated_at     DateTime
  addresses      Address[]
  carts          Cart[]
  orders         Order[]
  reviews        Review[]

  @@map("users")
}

model Review {
  id        String   @id
  content   String
  rating    Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("reviews")
}

enum Role {
  admin
  user
}
